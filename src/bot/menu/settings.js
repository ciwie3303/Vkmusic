"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const source_1 = require("telegraf-inline-menu/dist/source");
const bus_1 = require("../../main/bus");
const extensions_1 = require("../extensions");
const ilaBus = bus_1.getILABus();
const TRUE_DECORATOR = "–≤–∫–ª—é—á–µ–Ω–æ";
const FALSE_DECORATOR = "–æ—Ç–∫–ª—é—á–µ–Ω–æ";
const switchDecorator = (bool) => bool ? TRUE_DECORATOR : FALSE_DECORATOR;
const listeningModeDecorator = (data) => {
    let text;
    switch (data) {
        case "parallel": {
            text = "–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π";
            break;
        }
        case "queue": {
            text = "–æ—á–µ—Ä–µ–¥—å";
            break;
        }
        default: {
            text = "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π)";
        }
    }
    return text;
};
let scriptOptions = {
    showAntiCaptchaKey: false,
    enableAuthorization: false,
    enableListening: false,
    enablePasswordChanging: false
};
const settingsMenu = new source_1.MenuTemplate(async () => {
    let settings = ilaBus.settings.getSettings();
    scriptOptions.enableAuthorization = !settings.skipAuthorization;
    scriptOptions.enablePasswordChanging = !settings.skipPasswordChanging;
    let listeningMethod = listeningModeDecorator(settings.listeningMode);
    let antiCaptchaValueText = (scriptOptions.showAntiCaptchaKey ? settings.antiCaptchaKey : "—Å–∫—Ä—ã—Ç–æ");
    let antiCaptchaBalance;
    if (settings.antiCaptchaKey) {
        try {
            antiCaptchaBalance = await ilaBus.settings.getAntiCaptchaBalance(settings.antiCaptchaKey);
        }
        catch (error) { }
    }
    let text = "‚öôÔ∏è –í—ã –ø–æ–ø–∞–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞\n\n" +
        `üîí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤: *${(settings.threads || "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")}*\n` +
        `üîí –ú–µ—Ç–æ–¥ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: *${listeningMethod}*\n\n` +
        `üìó –ö–ª—é—á –∞–Ω—Ç–∏-–∫–∞–ø—á–∏ (anti-captcha.com): *${antiCaptchaValueText}*\n` +
        `üìó –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: *${switchDecorator(!settings.skipAuthorization)}*\n` +
        `üìó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: *${switchDecorator(!settings.skipSessionChecking)}*\n` +
        `üìó –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: *${switchDecorator(!settings.skipPasswordChanging)}*\n\n` +
        `üíé –ë–∞–ª–∞–Ω—Å –∞–Ω—Ç–∏-–∫–∞–ø—á–∏: *${antiCaptchaBalance || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}* $\n\n`;
    let footer = "üë©üèº‚Äçüåæ –ü—É–Ω–∫—Ç—ã –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ –∑–∞–º–∫–æ–º (üîí), –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω—ã —á–µ—Ä–µ–∑ –±–æ—Ç–∞.\n" +
        "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è, –Ω—É–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å _.env_ —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ —Å–∫—Ä–∏–ø—Ç–∞.";
    return {
        text: text + footer,
        parse_mode: "Markdown"
    };
});
settingsMenu.toggle("üîë –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á –∞–Ω—Ç–∏-–∫–∞–ø—á–∏", "show-anticaptcha-key", {
    isSet(context) {
        return scriptOptions.showAntiCaptchaKey;
    },
    formatState() {
        return scriptOptions.showAntiCaptchaKey ? "üò≥ –°–∫—Ä—ã—Ç—å –∫–ª—é—á –∞–Ω—Ç–∏-–∫–∞–ø—á–∏" : "üîë –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á –∞–Ω—Ç–∏-–∫–∞–ø—á–∏";
    },
    set(context, state) {
        scriptOptions.showAntiCaptchaKey = state;
        return true;
    }
});
settingsMenu.interact("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–ª—é—á –∞–Ω—Ç–∏-–∫–∞–ø—á–∏", "edit-anticaptcha-key", {
    async do(context) {
        context.scene.enter("edit-anticaptcha-key");
        return true;
    }
});
settingsMenu.toggle("‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é", "enable-authorization", {
    isSet(context) {
        return scriptOptions.enableAuthorization;
    },
    formatState() {
        return scriptOptions.enableAuthorization ? "‚è∏ –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é" : "‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é";
    },
    set(context, state) {
        scriptOptions.enableAuthorization = state;
        ilaBus.settings.setAuthorizationState(state);
        return true;
    }
});
settingsMenu.toggle("‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è", "enable-passwordchange", {
    isSet(context) {
        return scriptOptions.enablePasswordChanging;
    },
    formatState() {
        return scriptOptions.enablePasswordChanging ? "‚è∏ –í—ã–∫–ª—é—á–∏—Ç—å —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è" : "‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è";
    },
    set(context, state) {
        scriptOptions.enablePasswordChanging = state;
        ilaBus.settings.setPasswordChangeState(state);
        return true;
    }
});
settingsMenu.manualRow(extensions_1.backButtons);
exports.default = settingsMenu;
