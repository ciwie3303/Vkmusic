"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const source_1 = require("telegraf-inline-menu/dist/source");
const bus_1 = require("../../main/bus");
const constants_1 = require("../constants");
const extensions_1 = require("../extensions");
const ilaBus = bus_1.getILABus();
const ADD_ACCOUNT_TEXT = "‚ûï –î–æ–±–∞–≤–∏—Ç—å";
const DOWNLOAD_ACCOUNTS_TEXT = "üì• –°–∫–∞—á–∞—Ç—å";
const ACCOUNTS_DECLINATION = ["–∞–∫–∫–∞—É–Ω—Ç", "–∞–∫–∫–∞—É–Ω—Ç–∞", "–∞–∫–∫–∞—É–Ω—Ç–æ–≤"];
const getAccountsCountString = async () => {
    let accounts = await ilaBus.accounts.getAccounts();
    let text = accounts.length
        ? "üôÇ –ö–æ–ª-–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: " + accounts.length
        : "üò≥ –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç";
    return text;
};
const accountsMenu = new source_1.MenuTemplate(async () => {
    let accountsCount = await getAccountsCountString();
    let text = "üìí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏\n\n" +
        '‚ùóÔ∏è –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å –∫–Ω–æ–ø–∫–æ–π "–æ—á–∏—Å—Ç–∏—Ç—å".\n–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –Ω–µ—ë, ' +
        '–≤—ã *—É–¥–∞–ª–∏—Ç–µ –≤—Å–µ* –∞–∫–∫–∞—É–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤ —Å–∫—Ä–∏–ø—Ç–µ.\n\n' + accountsCount;
    return {
        text, parse_mode: "Markdown"
    };
});
accountsMenu.interact(DOWNLOAD_ACCOUNTS_TEXT, "download-accounts", {
    async do(context) {
        context.answerCbQuery();
        let accounts = await ilaBus.accounts.getAccounts();
        if (accounts.length < 1) {
            await extensions_1.sendTemporaryMessage(context, {
                message: "üò∂ –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç.",
                delay: 3000
            });
            return false;
        }
        let buffer = await ilaBus.accounts.getAcccountsFile();
        const declination = extensions_1.numberDeclination(accounts.length, ACCOUNTS_DECLINATION);
        const caption = `üêñ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω.\nüìî –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç ${accounts.length} ${declination}.`;
        await context.replyWithDocument({
            source: buffer,
            filename: `${constants_1.FILENAME_PREFIX}_accounts.txt`
        }, { caption });
        return true;
    }
});
accountsMenu.interact(ADD_ACCOUNT_TEXT, "add-account", {
    async do(context) {
        context.scene.enter("accounts-add");
        return true;
    },
    joinLastRow: true
});
accountsMenu.manualRow(extensions_1.backButtons);
exports.default = accountsMenu;
