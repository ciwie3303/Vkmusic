"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const telegraf_1 = require("telegraf");
const bus_1 = require("../../main/bus");
const constants_1 = require("../constants");
const extensions_1 = require("../extensions");
const menu_1 = __importDefault(require("../menu"));
const BACK_BUTTON = telegraf_1.Markup.button.callback(constants_1.BACK_BUTTON_TEXT, "back");
const BACK_KEYBOARD = telegraf_1.Markup.inlineKeyboard([BACK_BUTTON]);
const ilaBus = bus_1.getILABus();
const scene = new telegraf_1.Scenes.WizardScene("accounts-add", extensions_1.asyncWrapper(extensions_1.sendLoadMethodChoice), extensions_1.asyncWrapper(async (context) => {
    let { method } = extensions_1.getStateReference(context);
    switch (method) {
        case 0: {
            await fileProcess(context);
            break;
        }
        case 1: {
            await textProcess(context);
            break;
        }
        default: await extensions_1.sendLoadMethodChoice(context);
    }
}));
scene.action("file-format", extensions_1.asyncWrapper(async (context) => {
    context.wizard.selectStep(0);
    const state = extensions_1.getStateReference(context);
    await context.answerCbQuery();
    await context.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤", BACK_KEYBOARD);
    state.method = 0;
    extensions_1.advanceSceneStep(context);
}));
scene.action("text-format", extensions_1.asyncWrapper(async (context) => {
    context.wizard.selectStep(0);
    const state = extensions_1.getStateReference(context);
    await context.answerCbQuery();
    await context.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤", BACK_KEYBOARD);
    state.method = 1;
    extensions_1.advanceSceneStep(context);
}));
scene.action("back", extensions_1.asyncWrapper(async (context) => {
    await context.answerCbQuery();
    await leaveScene(context);
}));
const fileProcess = async (context) => {
    if (!context.message || !("document" in context.message)) {
        return context.reply(`${constants_1.ERROR_EMOJI} –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤.`, BACK_KEYBOARD);
    }
    const { mime_type, file_id } = context.message.document;
    if (mime_type != "text/plain") {
        return context.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç.", BACK_KEYBOARD);
    }
    let { href } = await context.telegram.getFileLink(file_id);
    let buffer = await extensions_1.fetchArrayBuffer(href);
    await submitAccounts(context, buffer);
};
const textProcess = async (context) => {
    if (!context.message || !("text" in context.message))
        return context.reply(`${constants_1.ERROR_EMOJI} –í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.`, BACK_KEYBOARD);
    const text = context.message.text.trim();
    await submitAccounts(context, text);
};
async function submitAccounts(context, data) {
    await ilaBus.accounts.addAccounts(data);
    await context.reply("üôÇ –ê–∫–∫–∞—É–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã!\n\n" +
        "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω—É–∂–Ω–æ *–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–ø—Ç* –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", { parse_mode: "Markdown" });
    await leaveScene(context);
}
async function leaveScene(context) {
    await menu_1.default.replyToContext(context, "/accounts_menu/");
    return context.scene.leave();
}
exports.default = scene;
