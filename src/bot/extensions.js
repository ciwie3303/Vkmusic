"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatEnabledTask = exports.convertPlaylistInfoToUrl = exports.getSelectedTask = exports.taskDecorator = exports.fetchTasks = exports.backButtons = exports.advanceSceneStep = exports.sendLoadMethodChoice = exports.asyncWrapper = exports.escapeMarkdownSymbols = exports.fetchArrayBuffer = exports.numberDeclination = exports.getStateReference = exports.sendTemporaryMessage = void 0;
const utils_1 = require("../main/utils");
const axios_1 = __importDefault(require("axios"));
const telegraf_1 = require("telegraf");
const telegraf_inline_menu_1 = require("telegraf-inline-menu");
const constants_1 = require("./constants");
const sendTemporaryMessage = async (context, { message, delay, extra }) => {
    let { message_id } = await context.reply(message, extra);
    setTimeout(() => context.deleteMessage(message_id), delay);
};
exports.sendTemporaryMessage = sendTemporaryMessage;
const getStateReference = (context) => {
    return context.wizard.state;
};
exports.getStateReference = getStateReference;
const numberDeclination = (int, variants) => {
    let cases = [2, 0, 1, 1, 1, 2];
    return variants[(int % 100 > 4 && int % 100 < 20)
        ? 2
        : cases[(int % 10 < 5) ? int % 10 : 5]];
};
exports.numberDeclination = numberDeclination;
const fetchArrayBuffer = async (url) => {
    const response = await axios_1.default.get(url, { responseType: "arraybuffer" });
    return response.data;
};
exports.fetchArrayBuffer = fetchArrayBuffer;
const escapeMarkdownSymbols = (text) => {
    return text
        .replace("_", "\\_")
        .replace("*", "\\*")
        .replace("[", "\\[")
        .replace("`", "\\`");
};
exports.escapeMarkdownSymbols = escapeMarkdownSymbols;
const asyncWrapper = (handler) => {
    return async (context) => {
        try {
            await handler(context);
        }
        catch (error) {
            let markup = constants_1.BACK_KEYBOARD.reply_markup;
            await context.reply(`${constants_1.ERROR_EMOJI} –ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: *${error.message}*`, { parse_mode: "Markdown", reply_markup: markup });
        }
    };
};
exports.asyncWrapper = asyncWrapper;
function sendLoadMethodChoice(context) {
    return context.reply("‚ò∫ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏:", telegraf_1.Markup.inlineKeyboard([
        [
            telegraf_1.Markup.button.callback(`${constants_1.FILE_EMOJI} –§–∞–π–ª`, "file-format"),
            telegraf_1.Markup.button.callback(`${constants_1.TEXT_EMOJI} –¢–µ–∫—Å—Ç`, "text-format")
        ],
        [telegraf_1.Markup.button.callback(constants_1.BACK_BUTTON_TEXT, "back")]
    ]));
}
exports.sendLoadMethodChoice = sendLoadMethodChoice;
const advanceSceneStep = (context, offset = 0) => {
    return context.wizard.selectStep(context.wizard.cursor + offset + 1);
};
exports.advanceSceneStep = advanceSceneStep;
exports.backButtons = telegraf_inline_menu_1.createBackMainMenuButtons("–ù–∞–∑–∞–¥", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
async function fetchTasks(context, ilaBus, vk) {
    const { session } = context;
    session.tasks = ilaBus.listens.getTasks();
    await Promise.all(session.tasks.map(async (task) => {
        try {
            const playlistContent = await vk.audio.fetchPlaylist(task.playlistMeta);
            task.playlistContent = playlistContent;
        }
        catch (error) {
            utils_1.Logger.error("Unable to get playlist info", error);
        }
    }));
    return session.tasks;
}
exports.fetchTasks = fetchTasks;
function taskDecorator(task) {
    task.nextIterationTime ?? (task.nextIterationTime = 0);
    const deltaTime = task.nextIterationTime - Date.now();
    const remainedSecound = Math.floor(deltaTime / 1000);
    const nextIterationTimeDecorator = remainedSecound >= 0
        ? `‚è≥ –°–ª–µ–¥—É—é—â–µ–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ${remainedSecound} —Å–µ–∫.\n`
        : ``;
    const { playlistContent, playlistMeta: playlistInfo } = task;
    const listened = task.actualCount - task.initialCount;
    const remainedListens = (task.requiredCount - listened);
    const playlistUrl = convertPlaylistInfoToUrl(playlistInfo);
    const playlistText = playlistContent ? (`üê∂ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞: ${exports.escapeMarkdownSymbols(playlistContent.title)}\n` +
        `üê∫ –í–ª–∞–¥–µ–ª–µ—Ü –ø–ª–µ–π–ª–∏—Å—Ç–∞: [${exports.escapeMarkdownSymbols(playlistContent.authorName)}](vk.com${playlistContent.authorHref})\n` +
        `üìí –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞: _${exports.escapeMarkdownSymbols(playlistContent.description || "–æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç")}_\n` +
        `üè¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç: _${playlistContent.isOfficial ? "–¥–∞" : "–Ω–µ—Ç"}_\n` +
        `üóΩ –°—Ç–∞—Ç—É—Å: _${task.enabled ? "–≤–∫–ª—é—á–µ–Ω" : "–≤—ã–∫–ª—é—á–µ–Ω"}_\n` +
        `üìº –ü–ª–µ–π–ª–∏—Å—Ç: [—Å—Å—ã–ª–∫–∞](${playlistUrl})\n` +
        `üîâ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–µ–π: ${playlistContent.audioList.length}\n` +
        `üöÑ –°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π: [${task.speed}] LPM\n` + nextIterationTimeDecorator +
        `üçè –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ—Å–ª—É—à–∞—Ç—å: [${remainedListens > 0 ? remainedListens : 0}]\n` +
        `üçé –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª-–≤–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π: [${task.actualCount}]\n` +
        `üß≤ –í—Å–µ–≥–æ –ø—Ä–æ—Å–ª—É—à–∞–Ω–æ: [${listened}]`) : "ü§¨ –ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–µ–π–ª–∏—Å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–¥–∞–ª–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞!";
    return playlistText;
}
exports.taskDecorator = taskDecorator;
function getSelectedTask({ session }) {
    return session.tasks[session.taskIndex];
}
exports.getSelectedTask = getSelectedTask;
function convertPlaylistInfoToUrl(playlistInfo) {
    return `vk.com/music/playlist/${playlistInfo.ownerId}_${playlistInfo.id}`;
}
exports.convertPlaylistInfoToUrl = convertPlaylistInfoToUrl;
function formatEnabledTask(value) {
    return value ? "–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è" : "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω";
}
exports.formatEnabledTask = formatEnabledTask;
